#!/usr/bin/env bash
#================================================================
# HEADER
#================================================================
#% SYNOPSIS
#+    ${SCRIPT_NAME} [setup|root|user]
#%
#% DESCRIPTION
#%    Arch installation script
#% 
#%    To run this download the file and execute
#%    You "could" try this:
#%    
#%    # iwctl station wlan0 connect <station_name>
#%    # curl -O https://raw.githubusercontent.com/ktec/arch/xps/install
#%    # chmod +x install
#%    # ./install --step=1
#%
#% OPTIONS
#%    -s=[step], --step=[step]      Step to run
#%    -h, --help                    Print this help
#%    -v, --version                 Print script information
#%
#% EXAMPLES
#%    ${SCRIPT_NAME} --step=1
#%
#================================================================
#- IMPLEMENTATION
#-    version         ${SCRIPT_NAME} 0.1.0
#-    author          Keith Salisbury
#-    copyright       Copyright (c) Keith Salisbury
#-    license         GNU General Public License
#-    script_id       12345
#-
#================================================================
#  HISTORY
#     2021/01/01 : ktec : Script creation
# 
#================================================================
#  DEBUG OPTION
#    set -n  # Uncomment to check your syntax, without execution.
#    set -x  # Uncomment to debug this shell script
#
#================================================================
# END_OF_HEADER
#================================================================

SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
SCRIPT_NAME="$(basename ${0})"

usage() { printf "Usage: "; head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#+" | sed -e "s/^#+[ ]*//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ; }

# Enable xtrace if the DEBUG environment variable is set
if [[ ${DEBUG-} =~ ^1|yes|true$ ]]; then
	set -o xtrace         # Trace the execution of the script (debug)
fi

set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline

#================================================================
# Functions
#================================================================

banner() {
	tput setaf ${2:-7}
	echo "################################################################"
	echo "##################  $1"
	echo "################################################################"
	echo
	tput sgr0
}

install() {
	if [ "$EUID" -ne 0 ]; then
		if yay -Qi $1 &> /dev/null; then
			banner "The package "$1" is already installed" 6
		else
			banner "Installing package "$1""
			yay -S --noconfirm --needed $1
		fi  
	else
		if pacman -Qi $1 &> /dev/null; then
			banner "The package "$1" is already installed" 6
		else
			banner "Installing package "$1""
			pacman -S --noconfirm --needed $1
		fi  
	fi
}

install_many() {
	local arr=("$@")
	count=1
	for name in "${arr[@]}" ; do
		tput setaf 3;echo "Installing package nr.  "$count " " $name;tput sgr0;
		count=$[count+1]
		install $name
	done
}

install_aur() {
	banner $1
	git clone https://aur.archlinux.org/$1.git /tmp/$1
	pushd /tmp/$1
	makepkg -si --noconfirm
	popd
}

ask() {
	read -r -p "Would you like to $1 [y/N]? "
	if [[ $REPLY =~ ^[Yy]$ ]]; then return 0; else return 1; fi
}

#================================================================
# STEP 1 - Install
#================================================================

function step0 {
	list=(a b c)
	install_many ${list[@]}
	if ask "do the thing"; then
		cat /etc/skel/.bashrc
	fi
}

function step1 {
	# local MESSAGE="${@}"
	# partition
	# mountfs

	if ask "wipe the hard drive"; then
		echo "YES" | cryptsetup open --type plain /dev/nvme0n1 container --key-file /dev/random
		dd if=/dev/zero of=/dev/mapper/container status=progress
	fi

	if ask "repartition your drives"; then
		echo "Configure disks with GPT"
		(
			echo o              # Clear all partitions
			echo y              # Confirm

			echo n              # Add a new partition
			echo                # Partition number (Accept default)
			echo                # First sector (Accept default)
			echo +550M          # Last sector
			echo ef00           # EFI Partition type

			echo n              # Add a new partition
			echo                # Partition number (Accept default)
			echo                # First sector (Accept default)
			echo +32G           # Parition Size
			echo 8304           # Linux root partition type

			echo n              # Add a new partition
			echo                # Partition number (Accept default)
			echo                # First sector (Accept default)
			echo +128G          # Parition Size
			echo 8304           # Linux root partition type

			echo n              # Add a new partition
			echo                # Partition number (Accept default)
			echo                # First sector (Accept default)
			echo +16G           # Parition Size
			echo 8200           # Linux swap type

			echo n              # Add a new partition
			echo                # Partition number (Accept default)
			echo                # First sector (Accept default)
			echo                # Last sector (Accept default)
			echo 8302           # Linux swap type

			echo w              # Write changes
			echo yes            # Confirm
		) | gdisk /dev/nvme0n1

		echo "Create filesystems"
		mkfs.vfat -F32 -nESP /dev/nvme0n1p1
		echo "y" | mkfs.ext4 /dev/nvme0n1p2
		echo "y" | mkfs.ext4 /dev/nvme0n1p3
		mkswap /dev/nvme0n1p4
		echo "y" | mkfs.ext4 /dev/nvme0n1p5

		mount /dev/nvme0n1p2 /mnt
		mkdir -p /mnt/boot && mount /dev/nvme0n1p1 /mnt/boot
		mkdir -p /mnt/var && mount /dev/nvme0n1p3 /mnt/var
		swapon /dev/nvme0n1p4
		mkdir -p /mnt/home && mount /dev/nvme0n1p5 /mnt/home
	fi

	if ask "edit the mirror list"; then
		vim /etc/pacman.d/mirrorlist
	fi

	if ask "keyservers to the /etc/pacman.d/gnupg folder for the use with pacman?"; then
		echo '
		keyserver hkp://pool.sks-keyservers.net:80
		keyserver hkps://hkps.pool.sks-keyservers.net:443
		keyserver hkp://ipv4.pool.sks-keyservers.net:11371' | sudo tee --append /etc/pacman.d/gnupg/gpg.conf
		echo "####          Keyservers with ports have been added to /etc/pacman.d/gnupg/gpg.conf            ####"

		echo "update pgp keys"
		dirmngr </dev/null
		pacman-key --populate archlinux
		pacman-key --refresh-keys
	fi

	echo "Install base"
	pacstrap /mnt base base-devel linux linux-firmware git xorg-server xorg-twm xorg-xinit

	echo "Save file system table"
	genfstab -U -p /mnt >> /mnt/etc/fstab

	echo "Now configure CHROOT"
	cp ${SCRIPT_NAME} /mnt/ && chmod +x /mnt/${SCRIPT_NAME}
	arch-chroot /mnt ./${SCRIPT_NAME} --step=2

	banner "Now unmount the chroot"
	umount -R /mnt

	banner "Installation complete. Please reboot and log in."
	echo systemctl reboot
}

#================================================================
# STEP 2 - Setup/SysAdmin
#================================================================

function step2 {
	# local MESSAGE="${@}"    

	# ------------------------------------------------------
	# All code here is run as root
	# ------------------------------------------------------

	# echo "Install terminus font"
	# pacman -S --noconfirm terminus-font # A font we can read
	# setfont ter-v32n
	# echo 'FONT=ter-v32n' >> /etc/vconsole.conf

	banner "START SYSTEM SET UP" 5

	echo "Setup Networking"
	# wpa_supplicant + systemd-networkd + systemd-resolved
	# iwd + systemd-networkd + systemd-resolved
	list=(
		networkmanager
		networkmanager-openvpn
		network-manager-applet
		nm-connection-editor
		wpa_supplicant
	)
	install_many ${list[@]}

	# systemctl disable dhcpcd
	# systemctl enable NetworkManager
	# systemctl enable wpa_supplicant
	systemctl enable systemd-networkd
	systemctl enable systemd-resolved

	echo "Lets update Arch and install the linux headers"
	pacman -Syu
	pacman -S linux{,-headers}

	echo "Setup Timezone"
	ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime

	echo "Setup Localization"
	cat > /etc/locale.conf <<-FILE
	LANG=en_GB.UTF-8
	LANGUAGE=en_GB:en
	LC_ALL=C
	LC_COLLATE=C
	LC_MESSAGES=""
	FILE

	sed -i '/#en_GB/s/^#//' /etc/locale.gen
	export LC_ALL='en_GB.UTF-8'
	locale-gen

	echo "Configure keyboard"
	loadkeys us

	cat > /etc/vconsole.conf <<-FILE
	KEYMAP=us
	FILE

	timedatectl set-ntp true

	localectl set-keymap en-latin1-nodeadkeys
	# localectl set-x11-keymap de-latin1-nodeadkeys

	cat > /etc/X11/xorg.conf.d/00-keyboard.conf <<-FILE
	Section "InputClass"
	Identifier "system-keyboard"
	MatchIsKeyboard "on"
	Option "XkbLayout"  "gb,us"
	Option "XkbVariant" "nodeadkeys"
	EndSection
	FILE

	echo "Update hosts file"
	cat >> /etc/hosts <<-FILE
	127.0.0.1     localhost.localdomain      localhost
	::1           localhost.localdomain      localhost
	127.0.1.1     myhostname.localdomain     myhostname
	FILE

	cat >> /etc/resolve.conf <<-FILE
	# OpenDNS IPv4 nameservers
	nameserver 193.183.98.66
	nameserver 51.254.25.115
	nameserver 188.165.200.156
	nameserver 51.255.48.78

	# OpenDNS IPv6 nameservers
	nameserver 2620:0:ccc::2
	nameserver 2620:0:ccd::2

	# Google IPv4 nameservers
	nameserver 8.8.8.8
	nameserver 8.8.4.4

	# Google IPv6 nameservers
	nameserver 2001:4860:4860::8888
	nameserver 2001:4860:4860::8844

	# Comodo nameservers
	nameserver 8.26.56.26
	nameserver 8.20.247.20
	FILE

	echo "Install bootloader"
	pacman -S --noconfirm intel-ucode
	# Install systemd-boot
	bootctl install
	# Get the IDs of root and swap partitions
	BOOTUUID=$(blkid | grep nvme0n1p2 | sed 's/.*PARTUUID="\(.*\)".*/PARTUUID=\1/g')
	SWAPUUID=$(blkid | grep nvme0n1p4 | sed 's/.*UUID="\(.*\)".*/UUID=\1/g')
	cat > /boot/loader/entries/arch.conf <<-FILE
	title Arch Linux
	linux /vmlinuz-linux
	initrd /intel-ucode.img
	initrd /initramfs-linux.img
	options root=$BOOTUUID resume=$SWAPUUID rw quiet splash
	FILE

	# Hibernation
	# The bootloader above has been configured to point the kernel to your swap using the resume= kernel parameter.
	# This tells the kernel to attempt resuming from the specified swap in early userspace.
	# mkinitcpio is a Bash script used to create an initial ramdisk environment.
	# A preset is a predefined definition of how to create an initramfs image
	# instead of specifying the configuration file and output file every time.
	# The -p/--preset switch specifies a preset to utilize.
	# For example, mkinitcpio -p linux selects the preset provided by the linux package.

	# TODO: Investigate whether these are needed
	# install_aur aic94xx-firmware
	# install_aur wd719x-firmware

	echo "Update intramfs"
	sed -i '/^HOOKS/s/)$/\ resume)/' /etc/mkinitcpio.conf
	mkinitcpio -p linux

	echo "Ensure the bootloader is updated after updating systemd"
	mkdir -p /etc/pacman.d/hooks/ 
	cat > /etc/pacman.d/hooks/systemd-boot.hook <<-FILE
	[Trigger]
	Type = Package
	Operation = Upgrade
	Target = systemd

	[Action]
	Description = Updating systemd-boot
	When = PostTransaction
	Exec = /usr/bin/bootctl update
	FILE

	if ask "install some essentials"; then
		list=(
			htop 
			acpi
			acpid
			alacritty
			arandr
			avahi 
			dbus 
			cups 
			dnsutils
			keychain
			nss-mdns
			ntp 
			openssh
			powertop
			python-dbus
			sudo 
			wget 
			wxgtk
			xbindkeys
			xfce4-power-manager
			xorg-apps
			xterm
			cronie
			dialog 
			gvim 
		)

		install_many ${list[@]}
		echo "Enable system services"
		systemctl enable acpid
		systemctl enable ntpd
		systemctl enable avahi-daemon
		systemctl enable cups
		#systemctl enable systemd-timesyncd
	fi

	if ask "install i3wm"; then
		list=(
			# autocutsel
			# gtk2-perl
			# rxvt-unicode
			dmenu
			i3-gaps
			i3status
			compton
			redshift
			thunar 
			thunar-archive-plugin
			thunar-media-tags-plugin
			thunar-volman
		)

		install_many ${list[@]}
	fi

	if ask "install arcolinux-sway"; then
		list=(
			lightdm
			arcolinux-lightdm-gtk-greeter
			arcolinux-lightdm-gtk-greeter-settings
			arcolinux-wallpapers-git
			thunar
			thunar-archive-plugin
			thunar-volman
			xfce4-terminal
			arcolinux-xfce-git
			arcolinux-local-xfce4-git
			sway
			i3status
			dmenu
			feh
			autotiling
			alacritty
			arcolinux-sway-git
			arcolinux-config-sway-git
			arcolinux-sway-dconf-git
			arcolinux-logout-git
		)

		install_many ${list[@]}
		sudo systemctl enable lightdm.service -f
	fi

	echo "Update the time"
	#echo "server de.pool.ntp.org" >> /etc/ntp.conf
	ntpd -gq
	hwclock --systohc --utc

	# OSX
	# echo "Disable wake from USB"
	# cat > /etc/udev/rules.d/90-xhc_sleep.rules <<-FILE
	# # disable wake from S3 on XHC1
	# SUBSYSTEM=="pci", KERNEL=="0000:00:14.0", ATTR{power/wakeup}=="disabled"
	# RUN+="/bin/sh -c '/bin/echo disabled > /sys$env{DEVPATH}/power/wakeup'"
	# FILE

	echo "Load powertop autotune settings at boot"
	# For more effective power management it is recommended to follow
	# https://wiki.archlinux.org/index.php/Power_management
	cat > /etc/systemd/system/powertop.service <<-FILE
	[Unit]
	Description=Powertop tunings

	[Service]
	ExecStart=/usr/bin/powertop --auto-tune
	RemainAfterExit=true

	[Install]
	WantedBy=multi-user.target
	FILE

	# Maybe we want sound?
	echo "Lets get sound working"
	pacman -S --noconfirm alsa-utils
	echo "Here are the sound cards"
	cat /proc/asound/cards
	aplay -l

	cat > /etc/asound.conf <<-FILE
	defaults.pcm.card 1
	defaults.pcm.device 0
	defaults.ctl.card 0
	FILE

	# cat > /etc/systemd/network/25-wireless.network <<-FILE
	# [Match]
	# Name=wl*
	#
	# [Network]
	# DHCP=ipv4
	# FILE

	echo "Enable natural scrolling and will setup trackpad acceleration like it is on MacOS"
	cat > /etc/X11/xorg.conf.d/30-touchpad.conf <<-FILE
	Section "InputClass"
			Identifier "touchpad"
			Driver "libinput"
			MatchIsTouchpad "on"
			Option "Tapping" "on"
			Option "NaturalScrolling" "true"
			Option "ClickMethod" "clickfinger"
			Option "AccelProfile" "flat"
			Option "AccelSpeed" "0.4"
	EndSection
	FILE

	echo "Enable natural scrolling for our external mouse as well"
	cat > /etc/X11/xorg.conf.d/30-pointer.conf <<-FILE
	Section "InputClass"
			Identifier "pointer"
			Driver "libinput"
			MatchIsPointer "on"
			Option "NaturalScrolling" "true"
	EndSection
	FILE

	if ask "set the keyboard layout to pc104?"; then
		localectl --no-convert set-x11-keymap gb pc104
	fi

	# echo "Switch audio output from HDMI to PCH and Enable sound chipset powersaving"
	# # cat > /etc/udev/rules.d/90-xhc_sleep.rules <<-FILE
	# cat > /etc/modprobe.d/alsa-base.conf <<-FILE
	# options snd_hda_intel index=1,0 power_save=1
	# FILE

	echo "Download and install brightness script"
	curl https://gist.githubusercontent.com/ktec/155d4599a79dea985d3bdefde6f87903/raw/7f7ccd0ac2f8b3ad5731b624bdeaa931a49d8cfb/brightness -o /usr/local/bin/brightness
	chmod +x /usr/local/bin/brightness

	echo "Add rule to enable changing screen brightness without sudo"
	cat > /etc/udev/rules.d/90-backlight.rules <<-FILE
	SUBSYSTEM=="backlight", ACTION=="add", \
	RUN+="/bin/chgrp video %S%p/brightness", \
	RUN+="/bin/chmod g+w %S%p/brightness", \
	RUN+="/bin/setpci -v -H1 -s 00:01.00 BRIDGE_CONTROL=0"
	# disable wake from S3 on XHC1
	# SUBSYSTEM=="pci", KERNEL=="0000:00:14.0", ATTR{power/wakeup}="disabled"
	FILE

	echo "Download and install kbdlight script"
	curl https://gist.githubusercontent.com/ktec/6efc41613a772f1e2807a14782478342/raw/21a1874b69e69b68b852306898aa826c41a01305/kbdlight -o /usr/local/bin/kbdlight
	chmod +x /usr/local/bin/kbdlight

	echo "Add rule to enable changing screen brightness without sudo"
	cat > /etc/udev/rules.d/90-kbdlight.rules <<-FILE
	SUBSYSTEM=="leds", ACTION=="add", KERNEL=="*::kbd_backlight", \
	RUN+="/bin/chgrp video %S%p/brightness", \
	RUN+="/bin/chmod g+w %S%p/brightness"
	FILE

	read -p "Would you like to hibernate on low battery?" -n 1
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		echo "Add rule to hibernate on low battery level"
		cat > /etc/udev/rules.d/99-low-battery-hibernate.rules <<-FILE
		# Suspend the system when the battery level drops to 5% or lower
		SUBSYSTEM=="power_supply", \
		ATTR{status}=="Discharging", \
		ATTR{capacity}=="[0-5]", \
		RUN+="/usr/bin/systemctl hibernate"
		FILE
	fi

	# read -p "Would you like to install bluetooth?" -n 1
	# echo
	# if [[ $REPLY =~ ^[Yy]$ ]]; then
	#     echo "Install bluez"
	#     pacman -S --noconfirm bluez bluez-utils

	# # This is the "old" way
	# echo "Add rule to load bluetooth at boot"
	# cat > /etc/udev/rules.d/10-local.rules <<-FILE
	# # Set bluetooth power up
	# ACTION=="add", KERNEL=="hci0", RUN+="/usr/bin/hciconfig %k up"
	# FILE

	# # This is the "new" way
	# sed -i '/#AutoEnable=false/s/AutoEnable=true//' /etc/bluetooth/main.conf

	# # TODO: Confirm the new way actually works - didn't seem to on first attempt
	# fi

	read -p "Would you like to setup bluetooth [y/N]? " -n 1
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		pacman -S --noconfirm bluez bluez-utils blueberry
		systemctl enable bluetooth.service
		systemctl start bluetooth.service
		systemctl status bluetooth.service
		echo "Try: agent on\npower on\nscan on\n"
		echo "Also change autoenable: /etc/bluetooth/main.conf"
		echo "Use bluetoothctl"
	fi

	read -p "Would you like to setup a low battery alarm? [y/N]? " -n 1
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		cat > /etc/acpi/events/low_battery_warning <<-FILE
		event=battery.*
		action=/etc/acpi/actions/low_battery_warning.sh %e
		FILE
	fi

	read -p "Would you like to prevent suspend when docked? [y/N]? " -n 1
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		sed -i '/#HandleLidSwitchDocked/s/^#//' /etc/systemd/logind.conf
		systemctl restart systemd-logind.service
	fi

	echo "*********************************************************"
	echo "**              SYSTEM SET UP COMPLETE                 **"
	echo "*********************************************************"

	regex='^[0-9a-zA-Z._-]+$'

	while true; do
		read -p "Please enter a username " USERNAME
		if [[ $USERNAME =~ $regex ]]; then
		break
		else
		echo "Invalid name."
		echo "Username can only contain A-z0-9.-_"
		echo "Please try again."
		fi
	done

	echo "Hello ${USERNAME}"
	echo "We're now going to set up a user account for you."

	useradd -m -g users -G wheel,storage,power,lp,sys,video -s /bin/bash $USERNAME
	passwd $USERNAME

	echo "Enable wheel users for sudo commands"
	sed -i '/%wheel ALL=(ALL) ALL/s/^#//' /etc/sudoers

	echo "Create user installation script"
	pushd /home/$USERNAME
	cat > user.sh <<-FILE
	#!/usr/bin/env bash
	# To connect using NetworkManager:
	# systemctl enable NetworkManager
	# systemctl start NetworkManager
	# nmcli –ask device wifi connect SSID-Name password

	/install -s=3
	FILE
	chown -R $USERNAME:users user.sh
	chmod +x user.sh
	popd

	echo "Setup complete - now reboot!"
	exit 0
}

#================================================================
# STEP 3 - User Setup
#================================================================

# user stuff
function step3 {
	# local MESSAGE="${@}"

	install_aur package-query
	install_aur yay

	# OSX Requirement
	# echo "Install Broadcom-Wl"
	# yay -S --noconfirm broadcom-wl

	if ask "install some os utilities"; then
		list=(
			# nautilus
			# screenfetch
			# urxvt-resize-font-git
			bash-completion
			ctags
			dunst
			file-roller
			gnome-calculator
			gnome-keyring libsecret seahorse
			gparted exfat-utils ntfs-3g udftools nilfs-utils gpart mtools
			gtk2
			gtk3
			gvfs gvfs-nfs gvfs-smb
			inotify-tools
			iotop
			lxappearance
			networkmanager-dmenu-git
			nfs-utils
			ranger
			rofi
			rsync
			sshfs
			the_silver_searcher
			tree
			ttf-dejavu
			udisks2 udiskie
			unzip
			urxvt-font-size-git
			w3m
			wxgtk
			wxgtk3
			xsane
		)

		install_many ${list[@]}
	fi

	read -p "Would you like to install tools and drivers for monitoring temperatures, voltage, and fans? [y/N]? " -n 1
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
			yay -S --noconfirm lm-sensors
			yay -S --noconfirm xfce4-sensors-plugin
			echo """
			Check out https://wiki.archlinux.org/index.php/lm_sensors for more details...
			"""
	fi

	if ask "install printing stuff"; then
		list=(
			canon-pixma-mg5500-complete
			ghostscript
			simple-scan
		)

		install_many ${list[@]}
	fi

	read -p "Would you like to install pulseaudio stuff? [y/N]? " -n 1
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
			yay -S --noconfirm pulseaudio-alsa
			yay -S --noconfirm pulseaudio-bluetooth
			yay -S --noconfirm pavucontrol
	fi

	read -p "Would you like to setup a new SSH key [y/N]? " -n 1
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
			pushd $HOME
			mkdir .ssh && chmod 700 .ssh
			ssh-keygen -t ed25519
			eval "$(ssh-agent -s)"
			ssh-add
			popd
	fi

	read -p "Would you like to install ktec dotfiles [y/N]? " -n 1
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
			pushd $HOME
			echo "Setting up dotfiles. This should move to a dotfiles.git repo..."
			git clone -b arch --bare https://github.com/ktec/dotfiles.git .git
			git config core.bare false
			git remote remove origin
			git remote add -f origin https://github.com/ktec/dotfiles.git
			git fetch -p && git reset --hard origin/arch
			source ~/.bashrc
			popd
	fi

	read -p "Would you like to install asdf [y/N]? " -n 1
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
			pushd $HOME
			git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.4.3
			popd
	fi

	read -p "Would you like to install some helpful installer scripts [y/N]? " -n 1
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		mkdir $HOME/setup
		pushd $HOME/setup
		curl -O https://raw.githubusercontent.com/ktec/arch/xps/setup/apps.sh
		curl -O https://raw.githubusercontent.com/ktec/arch/xps/setup/theme.sh
		curl -O https://raw.githubusercontent.com/ktec/arch/xps/setup/nvidia.sh
		chmod +x *.sh
		popd
	fi


	read -p "Would you like to install android stuff [y/N]? " -n 1
	echo
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		yay -S --noconfirm android-tools
		yay -S --noconfirm android-udev
	fi

	exit 0
}

# parse options
for i in "$@"
do
case $i in
		-s=*|--step=*)
		STEP="step${i#*=}"
		${STEP}
		;;

		-h|--help)
		usage
		;;

		*)
		# unknown option
		echo
		usage
		exit 1
		;;
esac
done

# if no input argument found, exit the script with usage
if [[ ${#} -eq 0 ]]; then
	 usage
fi

exit 0
